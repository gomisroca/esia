// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    engineType    = "binary"
    binaryTargets = ["linux-musl", "rhel-openssl-3.0.x"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    admin         Boolean   @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Artist {
    id          String    @id @default(cuid())
    name        String    @unique
    birth       Int?
    death       Int?
    description String?
    artworks    Artwork[]
}

model Artwork {
    id       String  @id @default(cuid())
    name     String  @unique
    artistId String
    artist   Artist  @relation(fields: [artistId], references: [id])
    medium   String?
    date     String?
    origin   String?
    image    String?
    style    String?
}

model Exhibition {
    id          String   @id @default(cuid())
    name        String   @unique
    image       String?
    start       DateTime
    end         DateTime
    description String
}

model Blog {
    id          String   @id @default(cuid())
    name        String
    content     String
    date        DateTime
    headerImage String?
}
